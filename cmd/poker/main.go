package main

import (
	"context"
	"encoding/gob"
	"os"
	"os/signal"
	"poker/internal/authenticator"
	"poker/internal/server"
	"poker/internal/store/dynamo"
	"poker/internal/templates"
	"syscall"
	"time"

	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/ddouglas/dynastore"
	"github.com/sirupsen/logrus"
)

var (
	logger = logrus.New()
)

func main() {
	loadConfig()

	cfg, err := config.LoadDefaultConfig(context.TODO())
	if err != nil {
		logger.WithError(err).Fatal("failed to load aws default config")
	}

	svc := dynamodb.NewFromConfig(cfg)

	sessionStore, _ := dynastore.New(svc, dynastore.TableName("poker-sessions-us-east-1"), dynastore.PrimaryKey("ID"))

	gob.Register(make(map[string]any))

	authSrv, err := authenticator.New(&authenticator.Config{
		ClientID:     appConfig.Auth0.ClientID,
		ClientSecret: appConfig.Auth0.ClientSecret,
		Tenant:       appConfig.Auth0.Domain,
		CallbackURL:  appConfig.Auth0.CallbackURL,
	})
	if err != nil {
		logger.WithError(err).Fatal("failed to provision authenticator service")
	}

	timerRepo := dynamo.NewTimerRepository(svc, "poker-timers-us-east-1")
	userRepo := dynamo.NewUserRepository(svc, "poker-users-us-east-1")

	server := server.New(
		appConfig.Environment,
		appConfig.AppURL,
		appConfig.Server.Port,
		logger,

		authSrv,
		sessionStore,

		timerRepo,
		userRepo,
	)

	tmpl, err := templates.New(
		appConfig.Environment,
		logger,
		timerRepo,
	)
	if err != nil {
		logger.WithError(err).Fatal("failed to provision template service")
	}

	// Channel to listen for errors generated by api server
	serverErrors := make(chan error, 1)

	// Channel to listen for interrupts and to run a graceful shutdown
	osSignals := make(chan os.Signal, 1)
	signal.Notify(osSignals, os.Interrupt, syscall.SIGTERM)

	// Start up our server
	go func() {
		serverErrors <- server.Run(tmpl)
	}()

	// Blocking until read from channel(s)
	select {
	case err := <-serverErrors:
		logger.Fatalf("error starting server: %v", err.Error())

	case <-osSignals:
		logger.Println("starting server shutdown...")
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		err := server.GracefullyShutdown(ctx)
		if err != nil {
			logger.Fatalf("error trying to shutdown http server: %v", err.Error())
		}

	}
}
