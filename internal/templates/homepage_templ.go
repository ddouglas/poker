// Code generated by templ@v0.2.316 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"poker"
)

func (s *Service) Homepage(ctx context.Context, user *poker.User) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html lang=\"en\">")
		if err != nil {
			return err
		}
		err = s.top().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = s.navbar(ctx, user).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"banner\"><div class=\"overlay\"><div class=\"mt-5\"><h1>")
		if err != nil {
			return err
		}
		var_2 := `Red | Ventures Poker`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><hr><p class=\"text-center\">")
		if err != nil {
			return err
		}
		var_3 := `Free Food, Free Drinks, Great Time!`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><p class=\"text-center\"><button class=\"btn btn-primary\">")
		if err != nil {
			return err
		}
		var_4 := `Sign Up`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></p></div></div></div>")
		if err != nil {
			return err
		}
		err = s.bottom().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
