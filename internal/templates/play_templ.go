// Code generated by templ@v0.2.316 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"poker"
)

type PlayProps struct {
	User         *poker.User
	Timer        *poker.Timer
	Level        *poker.TimerLevel
	CurrentLevel uint
}

func (s *Service) Play(ctx context.Context, props *PlayProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html lang=\"en\">")
		if err != nil {
			return err
		}
		err = s.top().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body>")
		if err != nil {
			return err
		}
		err = s.navbar(ctx, props.User).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = s.breadcrumbs(s.newBreadcrumb("Dashboard", "dashboard"), s.newBreadcrumb("Timer", "dashboard-timer", "timerID", props.Timer.ID), s.newBreadcrumb(props.Timer.Name, "play-timer", "timerID", props.Timer.ID)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = s.TimerMasthead(props.Timer, props.Level, props.CurrentLevel).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = s.bottom().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = s.setCountdownData().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) TimerMasthead(timer *poker.Timer, level *poker.TimerLevel, currentLevel uint) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"timer-container\" class=\"container\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col-10 offset-1\"><h1 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_3 := `Timer `
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		var var_4 string = timer.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_4))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><hr><div class=\"row\"><div class=\"col\"><div class=\"timer-container d-flex justify-content-center align-items-center\">")
		if err != nil {
			return err
		}
		if timer.IsComplete {
			_, err = templBuffer.WriteString("<div id=\"timer\" class=\"timer-complete-font\">")
			if err != nil {
				return err
			}
			var_5 := `Timer Complete`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div id=\"timer\" class=\"timer-large-font\" data-level-duration-sec=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(format(level.DurationSec)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_6 string = level.DurationStr
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div></div><div class=\"row mt-2\"><div class=\"col\"><hr></div></div><div class=\"row mt-2\"><div class=\"col-5\"><div class=\"d-flex justify-content-center\"><div class=\"text-center\"><h1>")
		if err != nil {
			return err
		}
		var_7 := `Current Level:`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <hr>")
		if err != nil {
			return err
		}
		var var_8 string = format(currentLevel)
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1></div></div></div><div class=\"col-2\"><div class=\"row\"><div class=\"col text-center\"><i id=\"toggle-timer-button\" class=\"fa-solid fa-circle-play fa-5x\"></i></div></div><div class=\"row\"><div class=\"col flex-row mt-2 text-center\"><i id=\"trigger-previous-timer-level\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("play-timer-previous-level", "timerID", level.TimerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"fa-solid fa-angles-left fa-3x \"></i><i id=\"trigger-reset-timer-level\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("play-timer-reset-level", "timerID", level.TimerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"fa-solid fa-arrow-rotate-left fa-3x \"></i><i id=\"trigger-next-timer-level\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("play-timer-next-level", "timerID", level.TimerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"fa-solid fa-angles-right fa-3x \"></i></div></div></div><div class=\"col-5\"><div class=\"d-flex justify-content-center\"><div class=\"text-center\"><h1>")
		if err != nil {
			return err
		}
		var_9 := `Current Blinds`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <hr>")
		if err != nil {
			return err
		}
		var var_10 string = format(level.SmallBlind)
		_, err = templBuffer.WriteString(templ.EscapeString(var_10))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_11 := `/`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var var_12 string = format(level.BigBlind)
		_, err = templBuffer.WriteString(templ.EscapeString(var_12))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1></div></div></div></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
