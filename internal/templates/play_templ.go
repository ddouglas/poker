// Code generated by templ@v0.2.316 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"poker"
	"time"
)

type PlayProps struct {
	User  *poker.User
	Timer *poker.Timer
}

func (s *Service) Play(ctx context.Context, props *PlayProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html lang=\"en\">")
		if err != nil {
			return err
		}
		err = s.top().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body>")
		if err != nil {
			return err
		}
		err = s.navbar(ctx, props.User).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"container\"><div class=\"row\"><div class=\"col-10 offset-1\"><h1 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_2 := `Timer `
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		var var_3 string = props.Timer.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_3))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><hr><div class=\"row\"><div class=\"col\"><div class=\"timer-container d-flex justify-content-center align-items-center\"><div id=\"timer\" class=\"timer-large-font\">")
		if err != nil {
			return err
		}
		var_4 := `00:00`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div></div></div><div class=\"row\"><div class=\"col-5\"><div class=\"d-flex justify-content-center\"><div class=\"text-center\"><h1>")
		if err != nil {
			return err
		}
		var_5 := `Current Level:`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<br>")
		if err != nil {
			return err
		}
		var_6 := `1`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1></div></div></div><div class=\"col-2\"><button id=\"toggle-timer\" class=\"btn btn-primary\">")
		if err != nil {
			return err
		}
		var_7 := `Play`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div><div class=\"col-5\"><div class=\"d-flex justify-content-center\"><div class=\"text-center\"><h1>")
		if err != nil {
			return err
		}
		var_8 := `Current Blinds`
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<br>")
		if err != nil {
			return err
		}
		var_9 := `100/200`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1></div></div></div></div></div></div></div>")
		if err != nil {
			return err
		}
		err = s.bottom().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = s.setCountdownData(props.Timer.Levels).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<script src=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%s/js/countdown.js?v=%d", s.buildRoute("static"), time.Now().Unix())))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_10 := ``
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
