package templates

import (
	"poker"
	"fmt"
)

templ (s *Service) Dashboard(ctx context.Context, user *poker.User) {
	<html lang="en">
			@s.top()
		<body>
			@s.navbar(ctx, user)
			<div class="container">
				<div class="row">
					<div class="col">
						<h1>Welcome { user.Name }</h1>
						<hr/>
					</div>
				</div>
				<div class="row">
					<div class="col-3">@s.dashboardUserMenu()</div>
					<div class="col-9">@s.dashboardStandings()</div>
				</div>
			</div>
			@s.bottom()
		</body>
	</html>
}

templ (s *Service) dashboardUserMenu() {
	<h5>User Menu</h5>
	<hr/>
	<div class="list-group"><a href={ templ.URL(s.buildRoute("dashboard")) } class="list-group-item list-group-item-action">Dashboard</a> <a href={ templ.URL(s.buildRoute("dashboard-timers")) } class="list-group-item list-group-item-action">My Timers</a></div>
}

templ (s *Service) dashboardStandings() {
	<div class="container" id="dashboard-section" hx-swap-oob="true">
		<div class="row">
			<div class="col">
				<h5 class="text-center">Your Standings</h5>
				<hr/>
			</div>
		</div>
	</div>
}

type DashboardTimersProps struct {
    User *poker.User
    Timers []*poker.Timer
}

templ (s *Service) DashboardTimers(ctx context.Context, props *DashboardTimersProps) {
	<html lang="en">
		@s.top()
		@s.navbar(ctx, props.User)
		<div class="container">
			<div class="row">
				<div class="col">
					<h1>Welcome { props.User.Name }</h1>
					<hr/>
				</div>
			</div>
			<div class="row">
				<div class="col-3">@s.dashboardUserMenu()</div>
				<div class="col-9">@s.dashboardTimers(ctx, props.Timers)</div>
			</div>
		</div>
		@s.bottom()
	</html>
}

templ (s *Service) DashboardTimersFragment(ctx context.Context, timers []*poker.Timer) {
	@s.dashboardTimers(ctx, timers)
}

templ (s *Service) dashboardTimers(ctx context.Context, timers []*poker.Timer) {
	<div class="container" id="dashboard-section" hx-swap-oob="true">
		<div class="row">
			<div class="col">
				<h5 class="text-center">My Blind Timers</h5>
				<hr/>
			</div>
		</div>
		<div class="row mb-3">
			<div class="col">
				<div class="list-group">
					if len(timers) > 0 {
						for _, timer := range timers {
							@s.dashboardTimerListItem(ctx, timer)
						}
					} else {
						<div class="alert alert-info text-center">You don't have any timers. Click below to create one now</div>
					}
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col"><button hx-get={ s.buildRoute("dashboard-timers-new") } hx-target="#dashboard-section" class="btn btn-primary">Create New Timer</button></div>
		</div>
	</div>
}

templ (s *Service) dashboardTimerListItem(ctx context.Context, timer *poker.Timer) {
	<div class="list-group-item">
		<div class="d-flex justify-content-between">
			<div>{ timer.Name }</div>
			<div>
				<div class="btn-group" role="group" aria-label="Basic example"><a href={ templ.URL(s.buildRoute("dashboard-timer", "timerID", timer.ID)) } class="btn btn-sm btn-info"><i class="fa-solid fa-pencil"></i></a> <button type="button" class="btn btn-sm btn-danger" hx-delete={ s.buildRoute("dashboard-timer", "timerID" , timer.ID) } hx-confirm="Are you sure you want to delete this timer?"><i class="fa-solid fa-trash"></i></button></div>
			</div>
		</div>
	</div>
}

templ (s *Service) DashboardTimersNewForm(ctx context.Context) {
	<div class="container" id="dashboard-section" hx-swap-oob="true">
		<div class="row">
			<div class="col">
				<h5 class="text-center">Create A New Timer</h5>
				<hr/>
			</div>
		</div>
		<div class="row">
			<div class="col-6 offset-3">
				<div class="card">
					<div class="card-body">
						<form hx-post={ s.buildRoute("dashboard-timers-new") } hx-target="#dashboard-section">
							<div class="mb-3"><label class="form-label">Timer Name</label><input type="text" class="form-control" autocomplete="off" name="name"/></div>
							<div class="d-flex justify-content-center"><button type="submit" class="btn btn-primary">Create Timer</button></div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
}

type DashboardTimerProps struct {
	User *poker.User
	Timer *poker.Timer
}

templ (s *Service) DashboardTimer(ctx context.Context, props *DashboardTimerProps) {
	<!DOCTYPE html>
	<html lang="en">
		@s.top()
		@s.navbar(ctx, props.User)
		<div class="container">
			<div class="row">
				<div class="col">
					<h1>Welcome { props.User.Name }</h1>
					<hr/>
				</div>
			</div>
			<div class="row">
				<div class="col-3">@s.dashboardUserMenu()</div>
				<div class="col-9">@s.DashboardTimerFragment(ctx, props.Timer)</div>
			</div>
		</div>
		@s.bottom()
	</html>
}

templ (s *Service) DashboardTimerFragment(ctx context.Context, timer *poker.Timer) {
	@s.dashboardTimer(ctx, timer)
}

templ (s *Service) dashboardTimer(ctx context.Context, timer *poker.Timer) {
	<div class="container" id="dashboard-section" hx-swap-oob="true">
		<div class="row">
			<div class="col">
				<h5 class="text-center">{ timer.Name }</h5>
				<hr/>
			</div>
		</div>
		<div class="row mb-2">
			<div class="col">
				<table class="table table-bordered"><thead>
	<tr>
		<th>#</th>
		<th>Small Blind</th>
		<th>Big Blind</th>
		<th>Ante</th>
		<th>Duration (minutes)</th>
		<th>&nbsp;</th>
	</tr>
</thead> <tbody>
	for idx, level := range timer.Levels {
		@s.dashboardTimerLevel(ctx,uint(idx+1), level)
	}
</tbody></table>
			</div>
		</div>
		<div class="row">
			<div class="col-6 offset-3">
				<div class="d-flex justify-content-around"><a href={ templ.SafeURL(s.buildRoute("play-timer", "timerID", timer.ID)) } class="btn btn-sm btn-success">Start Timer</a> <button hx-get={ fmt.Sprintf("%s?type=%s", s.buildRoute("dashboard-timer-levels", "timerID", timer.ID), "blind") } class="btn btn-sm btn-primary">Add	Blind</button> <button hx-get={ fmt.Sprintf("%s?type=%s", s.buildRoute("dashboard-timer-levels", "timerID", timer.ID), "break") } class="btn btn-sm btn-primary">Add Break</button></div>
			</div>
		</div>
	</div>
}

templ (s *Service) dashboardTimerLevel(ctx context.Context, idx uint, level *poker.TimerLevel) {
	<tr>
		switch level.Type {
			case "blind":
				<td>{ format(idx) }</td>
				<td>{ format(level.SmallBlind) }</td>
				<td>{ format(level.BigBlind) }</td>
				<td>{ format(level.Ante) }</td>
				<td>{ format(level.DurationMin) }</td>
			case "break":
				<td>{ format(idx) }</td>
				<td colspan="3" class="text-center"><strong><em>BREAK! </em></strong></td>
				<td>{ format(level.DurationMin) }</td>
		}
		<td><button hx-get={ s.buildRoute("dashboard-timer-level", "timerID", level.TimerID, "levelID", level.ID) } class="btn btn-primary"><i class="fa-solid fa-pencil"></i></button> <button hx-delete={ s.buildRoute("dashboard-timer-level", "timerID", level.TimerID, "levelID", level.ID) } class="btn btn-danger ms-2"><i class="fa-solid fa-trash"></i></button></td>
	</tr>
}

templ (s *Service) DashboardTimerLevelNew(ctx context.Context, timerID, levelType string) {
	switch levelType {
		case "break":
			@s.dashboardTimerLevelNewBreak(ctx, timerID, levelType)
		case "blind":
			@s.dashboardTimerLevelNewBlind(ctx, timerID, levelType)
	}
}

templ (s *Service) dashboardTimerLevelNewBreak(ctx context.Context, timerID, levelType string) {
	<div class="container" id="dashboard-section" hx-swap-oob="true">
		<div class="row">
			<div class="col">
				<h5 class="text-center">Create A New Timer Break Level</h5>
				<hr/>
			</div>
		</div>
		<div class="row">
			<div class="col-6 offset-3">
				<div class="card">
					<div class="card-body">
						<form hx-post={ s.buildRoute("dashboard-timer-levels", "timerID", timerID) } hx-target="#dashboard-section">
							<input type="hidden" name="TimerID" value={ timerID }/>
							<input type="hidden" name="Type" value={ levelType }/>
							<div class="mb-3"><label class="form-label">Duration (minutes)</label> <input type="number" class="form-control" name="DurationMin"/></div>
							<div class="d-flex justify-content-center"><button type="submit" class="btn btn-primary">Create Level</button> <button hx-get={ s.buildRoute("dashboard-timer", "timerID", timerID) } class="btn btn-danger ms-2">Cancel</button></div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ (s *Service) dashboardTimerLevelNewBlind(ctx context.Context, timerID, levelType string) {
	<div class="container" id="dashboard-section" hx-swap-oob="true">
		<div class="row">
			<div class="col">
				<h5 class="text-center">Create A New Timer Blind Level</h5>
				<hr/>
			</div>
		</div>
		<div class="row">
			<div class="col-6 offset-3">
				<div class="card">
					<div class="card-body">
						<form hx-post={ s.buildRoute("dashboard-timer-levels", "timerID", timerID) } hx-target="#dashboard-section">
							<input type="hidden" name="TimerID" value={ timerID }/>
							<input type="hidden" name="Type" value={ levelType }/>
							<div class="mb-3"><label class="form-label">Small Blind</label> <input type="number" class="form-control" name="SmallBlind"/></div>
							<div class="mb-3"><label class="form-label">Big Blind</label> <input type="number" class="form-control" name="BigBlind"/></div>
							<div class="mb-3"><label class="form-label">Ante</label> <input type="number" class="form-control" name="Ante"/></div>
							<div class="mb-3"><label class="form-label">Duration (minutes)</label> <input type="number" class="form-control" name="DurationMin"/></div>
							<div class="d-flex justify-content-center"><button type="submit" class="btn btn-primary">Create Level</button> <button hx-get={ s.buildRoute("dashboard-timer", "timerID", timerID) } class="btn btn-danger ms-2">Cancel</button></div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ (s *Service) DashboardTimerLevelEdit(ctx context.Context, level *poker.TimerLevel) {
	switch level.Type {
		case "break":
			@s.dashboardTimerLevelEditBreak(ctx, level)
		case "blind":
			@s.dashboardTimerLevelEditBlind(ctx, level)
	}
}

templ (s *Service) dashboardTimerLevelEditBreak(ctx context.Context, level *poker.TimerLevel) {
	<div class="container" id="dashboard-section" hx-swap-oob="true">
		<div class="row">
			<div class="col">
				<h5 class="text-center">Edit A Break Level</h5>
				<hr/>
			</div>
		</div>
		<div class="row">
			<div class="col-6 offset-3">
				<div class="card">
					<div class="card-body">
						<form hx-post={ s.buildRoute("dashboard-timer-level",  "timerID", level.TimerID, "levelID", level.ID) } hx-target="#dashboard-section">
							<div class="mb-3"><label class="form-label">Duration (minutes)</label> <input type="number" class="form-control" name="DurationMin" value={ format(level.DurationMin) }/></div>
							<div class="d-flex justify-content-center"><button type="submit" class="btn btn-primary">Edit Level</button> <button hx-get={ s.buildRoute("dashboard-timer", "timerID", level.TimerID) } class="btn btn-danger ms-2">Cancel</button></div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ (s *Service) dashboardTimerLevelEditBlind(ctx context.Context, level *poker.TimerLevel) {
	<div class="container" id="dashboard-section" hx-swap-oob="true">
		<div class="row">
			<div class="col">
				<h5 class="text-center">Edit A Blind Level</h5>
				<hr/>
			</div>
		</div>
		<div class="row">
			<div class="col-6 offset-3">
				<div class="card">
					<div class="card-body">
						<form hx-post={ s.buildRoute("dashboard-timer-level", "timerID", level.TimerID, "levelID", level.ID) } hx-target="#dashboard-section">
							<div class="mb-3"><label class="form-label">Small Blind</label> <input type="number" class="form-control" name="SmallBlind" value={ format(level.SmallBlind) }/></div>
							<div class="mb-3"><label class="form-label">Big Blind</label> <input type="number" class="form-control" name="BigBlind" value={ format(level.BigBlind) }/></div>
							<div class="mb-3"><label class="form-label">Ante</label> <input type="number" class="form-control" name="Ante" value={ format(level.Ante) }/></div>
							<div class="mb-3"><label class="form-label">Duration (minutes)</label> <input type="number" class="form-control" name="DurationMin" value={ format(level.DurationMin) }/></div>
							<div class="d-flex justify-content-center"><button type="submit" class="btn btn-primary">Edit Level</button> <button hx-get={ s.buildRoute("dashboard-timer", "timerID", level.TimerID) } class="btn btn-danger ms-2">Cancel</button></div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
}

