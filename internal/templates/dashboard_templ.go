// Code generated by templ@v0.2.316 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"poker"
)

func (s *Service) Dashboard(ctx context.Context, user *poker.User) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html lang=\"en\">")
		if err != nil {
			return err
		}
		err = s.top().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body>")
		if err != nil {
			return err
		}
		err = s.navbar(ctx, user).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"container\"><div class=\"row\"><div class=\"col\"><h1>")
		if err != nil {
			return err
		}
		var_2 := `Welcome `
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		var var_3 string = user.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_3))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><hr></div></div><div class=\"row\"><div class=\"col-3\">")
		if err != nil {
			return err
		}
		err = s.dashboardUserMenu().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"col-9\">")
		if err != nil {
			return err
		}
		err = s.dashboardStandings().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div></div>")
		if err != nil {
			return err
		}
		err = s.bottom().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardUserMenu() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<h5>")
		if err != nil {
			return err
		}
		var_5 := `User Menu`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr><div class=\"list-group\"><a href=\"")
		if err != nil {
			return err
		}
		var var_6 templ.SafeURL = templ.URL(s.buildRoute("dashboard"))
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_6)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"list-group-item list-group-item-action\">")
		if err != nil {
			return err
		}
		var_7 := `Dashboard`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><a href=\"")
		if err != nil {
			return err
		}
		var var_8 templ.SafeURL = templ.URL(s.buildRoute("dashboard-timers"))
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_8)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"list-group-item list-group-item-action\">")
		if err != nil {
			return err
		}
		var_9 := `My Timers`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardStandings() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_10 := templ.GetChildren(ctx)
		if var_10 == nil {
			var_10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"dashboard-section\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col\"><h5 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_11 := `Your Standings`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

type DashboardTimersProps struct {
	User   *poker.User
	Timers []*poker.Timer
}

func (s *Service) DashboardTimers(ctx context.Context, props *DashboardTimersProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_12 := templ.GetChildren(ctx)
		if var_12 == nil {
			var_12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html lang=\"en\">")
		if err != nil {
			return err
		}
		err = s.top().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = s.navbar(ctx, props.User).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"container\"><div class=\"row\"><div class=\"col\"><h1>")
		if err != nil {
			return err
		}
		var_13 := `Welcome `
		_, err = templBuffer.WriteString(var_13)
		if err != nil {
			return err
		}
		var var_14 string = props.User.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_14))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><hr></div></div><div class=\"row\"><div class=\"col-3\">")
		if err != nil {
			return err
		}
		err = s.dashboardUserMenu().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"col-9\">")
		if err != nil {
			return err
		}
		err = s.dashboardTimers(ctx, props.Timers).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div></div>")
		if err != nil {
			return err
		}
		err = s.bottom().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) DashboardTimersFragment(ctx context.Context, timers []*poker.Timer) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_15 := templ.GetChildren(ctx)
		if var_15 == nil {
			var_15 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		err = s.dashboardTimers(ctx, timers).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardTimers(ctx context.Context, timers []*poker.Timer) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_16 := templ.GetChildren(ctx)
		if var_16 == nil {
			var_16 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"dashboard-section\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col\"><h5 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_17 := `My Blind Timers`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr></div></div><div class=\"row mb-3\"><div class=\"col\"><div class=\"list-group\">")
		if err != nil {
			return err
		}
		if len(timers) > 0 {
			for _, timer := range timers {
				err = s.dashboardTimerListItem(ctx, timer).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
		} else {
			_, err = templBuffer.WriteString("<div class=\"alert alert-info text-center\">")
			if err != nil {
				return err
			}
			var_18 := `You don't have any timers. Click below to create one now`
			_, err = templBuffer.WriteString(var_18)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div></div><div class=\"row\"><div class=\"col\"><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timers-new")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#dashboard-section\" class=\"btn btn-primary\">")
		if err != nil {
			return err
		}
		var_19 := `Create New Timer`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardTimerListItem(ctx context.Context, timer *poker.Timer) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_20 := templ.GetChildren(ctx)
		if var_20 == nil {
			var_20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"list-group-item\"><div class=\"d-flex justify-content-between\"><div>")
		if err != nil {
			return err
		}
		var var_21 string = timer.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_21))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div><div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\"><a href=\"")
		if err != nil {
			return err
		}
		var var_22 templ.SafeURL = templ.URL(s.buildRoute("dashboard-timer", "timerID", timer.ID))
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_22)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-sm btn-info\"><i class=\"fa-solid fa-pencil\"></i></a><button type=\"button\" class=\"btn btn-sm btn-danger\" hx-delete=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer", "timerID", timer.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-confirm=\"Are you sure you want to delete this timer?\"><i class=\"fa-solid fa-trash\"></i></button></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) DashboardTimersNewForm(ctx context.Context) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_23 := templ.GetChildren(ctx)
		if var_23 == nil {
			var_23 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"dashboard-section\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col\"><h5 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_24 := `Create A New Timer`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr></div></div><div class=\"row\"><div class=\"col-6 offset-3\"><div class=\"card\"><div class=\"card-body\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timers-new")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#dashboard-section\"><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_25 := `Timer Name`
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" class=\"form-control\" autocomplete=\"off\" name=\"name\"></div><div class=\"d-flex justify-content-center\"><button type=\"submit\" class=\"btn btn-primary\">")
		if err != nil {
			return err
		}
		var_26 := `Create Timer`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></form></div></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

type DashboardTimerProps struct {
	User  *poker.User
	Timer *poker.Timer
}

func (s *Service) DashboardTimer(ctx context.Context, props *DashboardTimerProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_27 := templ.GetChildren(ctx)
		if var_27 == nil {
			var_27 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html lang=\"en\">")
		if err != nil {
			return err
		}
		err = s.top().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = s.navbar(ctx, props.User).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"container\"><div class=\"row\"><div class=\"col\"><h1>")
		if err != nil {
			return err
		}
		var_28 := `Welcome `
		_, err = templBuffer.WriteString(var_28)
		if err != nil {
			return err
		}
		var var_29 string = props.User.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_29))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><hr></div></div><div class=\"row\"><div class=\"col-3\">")
		if err != nil {
			return err
		}
		err = s.dashboardUserMenu().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"col-9\">")
		if err != nil {
			return err
		}
		err = s.DashboardTimerFragment(ctx, props.Timer).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div></div>")
		if err != nil {
			return err
		}
		err = s.bottom().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) DashboardTimerFragment(ctx context.Context, timer *poker.Timer) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_30 := templ.GetChildren(ctx)
		if var_30 == nil {
			var_30 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		err = s.dashboardTimer(ctx, timer).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardTimer(ctx context.Context, timer *poker.Timer) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_31 := templ.GetChildren(ctx)
		if var_31 == nil {
			var_31 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"dashboard-section\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col\"><h5 class=\"text-center\">")
		if err != nil {
			return err
		}
		var var_32 string = timer.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_32))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr></div></div><div class=\"row mb-2\"><div class=\"col\"><table class=\"table table-bordered\"><thead><tr><th>")
		if err != nil {
			return err
		}
		var_33 := `#`
		_, err = templBuffer.WriteString(var_33)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var_34 := `Small Blind`
		_, err = templBuffer.WriteString(var_34)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var_35 := `Big Blind`
		_, err = templBuffer.WriteString(var_35)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var_36 := `Ante`
		_, err = templBuffer.WriteString(var_36)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var_37 := `Duration (minutes)`
		_, err = templBuffer.WriteString(var_37)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var_38 := `&nbsp;`
		_, err = templBuffer.WriteString(var_38)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th></tr></thead><tbody>")
		if err != nil {
			return err
		}
		for idx, level := range timer.Levels {
			err = s.dashboardTimerLevel(ctx, uint(idx+1), level).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tbody></table></div></div><div class=\"row\"><div class=\"col-6 offset-3\"><div class=\"d-flex justify-content-around\"><a href=\"")
		if err != nil {
			return err
		}
		var var_39 templ.SafeURL = templ.SafeURL(s.buildRoute("play-timer", "timerID", timer.ID))
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_39)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-sm btn-success\">")
		if err != nil {
			return err
		}
		var_40 := `Start Timer`
		_, err = templBuffer.WriteString(var_40)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%s?type=%s", s.buildRoute("dashboard-timer-levels", "timerID", timer.ID), "blind")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-sm btn-primary\">")
		if err != nil {
			return err
		}
		var_41 := `Add	Blind`
		_, err = templBuffer.WriteString(var_41)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%s?type=%s", s.buildRoute("dashboard-timer-levels", "timerID", timer.ID), "break")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-sm btn-primary\">")
		if err != nil {
			return err
		}
		var_42 := `Add Break`
		_, err = templBuffer.WriteString(var_42)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardTimerLevel(ctx context.Context, idx uint, level *poker.TimerLevel) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_43 := templ.GetChildren(ctx)
		if var_43 == nil {
			var_43 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<tr>")
		if err != nil {
			return err
		}
		switch level.Type {
		case "blind":
			_, err = templBuffer.WriteString("<td>")
			if err != nil {
				return err
			}
			var var_44 string = format(idx)
			_, err = templBuffer.WriteString(templ.EscapeString(var_44))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td> <td>")
			if err != nil {
				return err
			}
			var var_45 string = format(level.SmallBlind)
			_, err = templBuffer.WriteString(templ.EscapeString(var_45))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td> <td>")
			if err != nil {
				return err
			}
			var var_46 string = format(level.BigBlind)
			_, err = templBuffer.WriteString(templ.EscapeString(var_46))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td> <td>")
			if err != nil {
				return err
			}
			var var_47 string = format(level.Ante)
			_, err = templBuffer.WriteString(templ.EscapeString(var_47))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td> <td>")
			if err != nil {
				return err
			}
			var var_48 string = format(level.DurationMin)
			_, err = templBuffer.WriteString(templ.EscapeString(var_48))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td>")
			if err != nil {
				return err
			}
		case "break":
			_, err = templBuffer.WriteString("<td>")
			if err != nil {
				return err
			}
			var var_49 string = format(idx)
			_, err = templBuffer.WriteString(templ.EscapeString(var_49))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td> <td colspan=\"3\" class=\"text-center\"><strong><em>")
			if err != nil {
				return err
			}
			var_50 := `BREAK! `
			_, err = templBuffer.WriteString(var_50)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</em></strong></td> <td>")
			if err != nil {
				return err
			}
			var var_51 string = format(level.DurationMin)
			_, err = templBuffer.WriteString(templ.EscapeString(var_51))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<td><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer-level", "timerID", level.TimerID, "levelID", level.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-primary\"><i class=\"fa-solid fa-pencil\"></i></button><button hx-delete=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer-level", "timerID", level.TimerID, "levelID", level.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-danger ms-2\"><i class=\"fa-solid fa-trash\"></i></button></td></tr>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) DashboardTimerLevelNew(ctx context.Context, timerID, levelType string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_52 := templ.GetChildren(ctx)
		if var_52 == nil {
			var_52 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		switch levelType {
		case "break":
			err = s.dashboardTimerLevelNewBreak(ctx, timerID, levelType).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		case "blind":
			err = s.dashboardTimerLevelNewBlind(ctx, timerID, levelType).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardTimerLevelNewBreak(ctx context.Context, timerID, levelType string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_53 := templ.GetChildren(ctx)
		if var_53 == nil {
			var_53 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"dashboard-section\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col\"><h5 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_54 := `Create A New Timer Break Level`
		_, err = templBuffer.WriteString(var_54)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr></div></div><div class=\"row\"><div class=\"col-6 offset-3\"><div class=\"card\"><div class=\"card-body\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer-levels", "timerID", timerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#dashboard-section\"><input type=\"hidden\" name=\"TimerID\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(timerID))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"Type\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(levelType))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_55 := `Duration (minutes)`
		_, err = templBuffer.WriteString(var_55)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"DurationMin\"></div><div class=\"d-flex justify-content-center\"><button type=\"submit\" class=\"btn btn-primary\">")
		if err != nil {
			return err
		}
		var_56 := `Create Level`
		_, err = templBuffer.WriteString(var_56)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer", "timerID", timerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-danger ms-2\">")
		if err != nil {
			return err
		}
		var_57 := `Cancel`
		_, err = templBuffer.WriteString(var_57)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></form></div></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardTimerLevelNewBlind(ctx context.Context, timerID, levelType string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_58 := templ.GetChildren(ctx)
		if var_58 == nil {
			var_58 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"dashboard-section\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col\"><h5 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_59 := `Create A New Timer Blind Level`
		_, err = templBuffer.WriteString(var_59)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr></div></div><div class=\"row\"><div class=\"col-6 offset-3\"><div class=\"card\"><div class=\"card-body\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer-levels", "timerID", timerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#dashboard-section\"><input type=\"hidden\" name=\"TimerID\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(timerID))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"Type\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(levelType))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_60 := `Small Blind`
		_, err = templBuffer.WriteString(var_60)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"SmallBlind\"></div><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_61 := `Big Blind`
		_, err = templBuffer.WriteString(var_61)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"BigBlind\"></div><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_62 := `Ante`
		_, err = templBuffer.WriteString(var_62)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"Ante\"></div><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_63 := `Duration (minutes)`
		_, err = templBuffer.WriteString(var_63)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"DurationMin\"></div><div class=\"d-flex justify-content-center\"><button type=\"submit\" class=\"btn btn-primary\">")
		if err != nil {
			return err
		}
		var_64 := `Create Level`
		_, err = templBuffer.WriteString(var_64)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer", "timerID", timerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-danger ms-2\">")
		if err != nil {
			return err
		}
		var_65 := `Cancel`
		_, err = templBuffer.WriteString(var_65)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></form></div></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) DashboardTimerLevelEdit(ctx context.Context, level *poker.TimerLevel) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_66 := templ.GetChildren(ctx)
		if var_66 == nil {
			var_66 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		switch level.Type {
		case "break":
			err = s.dashboardTimerLevelEditBreak(ctx, level).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		case "blind":
			err = s.dashboardTimerLevelEditBlind(ctx, level).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardTimerLevelEditBreak(ctx context.Context, level *poker.TimerLevel) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_67 := templ.GetChildren(ctx)
		if var_67 == nil {
			var_67 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"dashboard-section\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col\"><h5 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_68 := `Edit A Break Level`
		_, err = templBuffer.WriteString(var_68)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr></div></div><div class=\"row\"><div class=\"col-6 offset-3\"><div class=\"card\"><div class=\"card-body\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer-level", "timerID", level.TimerID, "levelID", level.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#dashboard-section\"><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_69 := `Duration (minutes)`
		_, err = templBuffer.WriteString(var_69)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"DurationMin\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(format(level.DurationMin)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div><div class=\"d-flex justify-content-center\"><button type=\"submit\" class=\"btn btn-primary\">")
		if err != nil {
			return err
		}
		var_70 := `Edit Level`
		_, err = templBuffer.WriteString(var_70)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer", "timerID", level.TimerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-danger ms-2\">")
		if err != nil {
			return err
		}
		var_71 := `Cancel`
		_, err = templBuffer.WriteString(var_71)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></form></div></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func (s *Service) dashboardTimerLevelEditBlind(ctx context.Context, level *poker.TimerLevel) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_72 := templ.GetChildren(ctx)
		if var_72 == nil {
			var_72 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"dashboard-section\" hx-swap-oob=\"true\"><div class=\"row\"><div class=\"col\"><h5 class=\"text-center\">")
		if err != nil {
			return err
		}
		var_73 := `Edit A Blind Level`
		_, err = templBuffer.WriteString(var_73)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h5><hr></div></div><div class=\"row\"><div class=\"col-6 offset-3\"><div class=\"card\"><div class=\"card-body\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer-level", "timerID", level.TimerID, "levelID", level.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#dashboard-section\"><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_74 := `Small Blind`
		_, err = templBuffer.WriteString(var_74)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"SmallBlind\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(format(level.SmallBlind)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_75 := `Big Blind`
		_, err = templBuffer.WriteString(var_75)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"BigBlind\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(format(level.BigBlind)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_76 := `Ante`
		_, err = templBuffer.WriteString(var_76)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"Ante\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(format(level.Ante)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div><div class=\"mb-3\"><label class=\"form-label\">")
		if err != nil {
			return err
		}
		var_77 := `Duration (minutes)`
		_, err = templBuffer.WriteString(var_77)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"number\" class=\"form-control\" name=\"DurationMin\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(format(level.DurationMin)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div><div class=\"d-flex justify-content-center\"><button type=\"submit\" class=\"btn btn-primary\">")
		if err != nil {
			return err
		}
		var_78 := `Edit Level`
		_, err = templBuffer.WriteString(var_78)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(s.buildRoute("dashboard-timer", "timerID", level.TimerID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"btn btn-danger ms-2\">")
		if err != nil {
			return err
		}
		var_79 := `Cancel`
		_, err = templBuffer.WriteString(var_79)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></form></div></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
