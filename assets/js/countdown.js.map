{
  "version": 3,
  "sources": ["../../internal/javascript/src/countdown.ts", "../../internal/javascript/src/elements.ts", "../../internal/javascript/src/events.ts", "../../internal/javascript/src/main.ts"],
  "sourcesContent": ["interface CountdownOpts {\n    initialValue: number\n    showHour: boolean\n    emitter: (current: string) => void\n    onComplete: () => void\n}\n\nclass Countdown {\n    private initialValue: number\n    private showHour: boolean\n    private isRunning: boolean = false\n    private emitter: (current: string) => void\n    private onComplete: () => void\n    private countdownValue: number;\n    private interval: ReturnType<typeof setTimeout> | null;\n\n    constructor({ initialValue, showHour, emitter, onComplete }: CountdownOpts) {\n        this.initialValue = initialValue;\n        this.showHour = showHour;\n        this.emitter = emitter;\n        this.onComplete = onComplete;\n        this.countdownValue = initialValue;\n        this.interval = null;\n    }\n\n    private decrementCountdown() {\n        // console.debug(\"Countdown.decrementCountdown() start\")\n        this.countdownValue--;\n\n        this.emitter(this.format(this.countdownValue))\n        if (this.countdownValue === 0) {\n            this.stop();\n            this.onComplete();\n        }\n        // console.debug(\"Countdown.decrementCountdown() stop\")\n    }\n\n    private format(duration: number): string {\n        // console.debug(\"Countdown.format() start\")\n        const parts = {\n            hours: Math.floor((duration / (60 * 60)) % 24),\n            minutes: Math.floor((duration / (60)) % 60),\n            seconds: Math.floor(duration % 60)\n        }\n\n        const bits: string[] = []\n        if (parts.hours > 0 && this.showHour) {\n            let bit: string = \"\"\n            if (parts.hours < 10) {\n                bit = `0`\n            }\n            bit = `${bit}${parts.hours}`\n        }\n\n        if (parts.minutes == 0) {\n            bits.push(`00`)\n        } else if (parts.minutes > 0) {\n            let bit: string = \"\"\n            if (parts.minutes < 10) {\n                bit = `0`\n            }\n            bit = `${bit}${parts.minutes}`\n            bits.push(bit)\n        }\n\n\n        if (parts.seconds == 0) {\n            bits.push(`00`)\n        } else if (parts.seconds > 0) {\n            let bit: string = \"\"\n            if (parts.seconds < 10) {\n                bit = `0`\n            }\n            bit = `${bit}${parts.seconds}`\n            bits.push(bit)\n        }\n\n        // console.debug(\"Countdown.format() stop\")\n        return bits.join(':')\n\n    }\n\n    public start() {\n        console.debug(\"Countdown.start()\")\n        if (this.interval) {\n            console.debug(\"Countdown.start() if this.interval\")\n            this.reset()\n        }\n\n        if (this.countdownValue === 0) {\n            console.error(\"countdownValue is 0, shutdown down\")\n            this.stop()\n            return\n        }\n        console.debug(\"Countdown.start() this.interval\")\n        this.interval = setInterval(() => this.decrementCountdown(), 1000)\n        this.isRunning = true\n        console.debug(\"Countdown.start() done\", this.interval)\n\n    }\n\n    public continue() {\n        this.stop()\n        this.start()\n    }\n\n    public stop() {\n        console.debug(\"Countdown.stop() start\", this.interval)\n        if (this.interval) {\n            console.debug(\"Countdown.stop() clearInterval\")\n\n            clearInterval(this.interval);\n        }\n\n        this.interval = null\n        this.isRunning = false\n        console.debug(\"Countdown.stop() stop\")\n    }\n\n    public toggle() {\n        console.debug(\"Countdown.toggle() start\")\n        this.isRunning ? this.stop() : this.start()\n        console.debug(\"Countdown.toggle() stop\")\n        return\n    }\n\n    public getIsRunning() {\n        return this.isRunning\n    }\n\n    public reset() {\n        console.debug(\"Countdown.reset() start\")\n        this.stop();\n        this.countdownValue = this.initialValue; // Reset the countdown value\n        console.log(\"reset :: \", this)\n        console.debug(\"Countdown.reset() stop\")\n    }\n}\n\nexport default Countdown", "\ninterface ElementsAndAttributes {\n    timerContainer: HTMLElement\n    timer: HTMLElement\n    timerToggle: HTMLElement\n    nextTimerButton: HTMLElement | null\n    nextLevelURI: string\n    durationSecStr: string\n}\n\nexport function fetchElements(): ElementsAndAttributes | null {\n    const timerContainer = document.getElementById('timer-container')\n    const timer = document.getElementById('timer')\n    const timerToggle = document.getElementById(\"toggle-timer-button\")\n    const nextTimerButton = document.getElementById(\"trigger-next-timer-level\")\n\n    if (!timerContainer) {\n        console.error(\"Failed to fetch timer-container by id\")\n        return null\n    }\n\n    if (!timer) {\n        console.error(\"failed to fetch timer element by id\")\n        return null\n    }\n\n    if (!timerToggle) {\n        console.error(\"failed to fetch toggle-timer-button element by id\")\n        return null\n    }\n\n    let nextLevelURI: string = \"\"\n    if (nextTimerButton) {\n        console.error(\"failed to fetch trigger-next-timer-level element by id\")\n        nextLevelURI = nextTimerButton.getAttribute(\"hx-get\") || \"\"\n    }\n\n    let durationSecStr = timer.getAttribute(\"data-level-duration-sec\")\n    if (!durationSecStr) {\n        console.error(\"trigger-next-timer-level element is missing attribute data-level-duration-sec\")\n        durationSecStr = \"0\"\n    }\n\n    return { timer, timerContainer, timerToggle, nextTimerButton, nextLevelURI, durationSecStr }\n\n}", "import { fetchElements } from \"./elements\"\nimport { initCountdown, startCountdown, stopCountdown, toggleCountdown } from \"./main\"\n\nvar abort: AbortController\n\nfunction initAbort() {\n    abort = new AbortController()\n}\n\ninitAbort()\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n    console.log(\"DOMContentLoaded :: start\")\n    initCountdown()\n    initTimerToggleEventClick()\n    console.log(\"DOMContentLoaded :: complete\")\n})\n\ndocument.body.addEventListener(\"countdown::proceed\", () => {\n    console.debug(\"countdown::proceed :: start\")\n    resetCountdown()\n    startCountdown()\n    console.debug(\"countdown::proceed :: complete\")\n})\n\ndocument.body.addEventListener(\"countdown::reset\", () => {\n    console.debug(\"countdown::reset :: start\")\n    resetCountdown()\n    console.debug(\"countdown::reset :: complete\")\n})\n\nfunction resetCountdown() {\n    stopCountdown()\n    abort.abort()\n    initAbort()\n    initCountdown()\n    initTimerToggleEventClick()\n}\n\nfunction initTimerToggleEventClick() {\n\n    const elements = fetchElements()\n    if (!elements) {\n        console.error(\"failed to fetch elements, unable to register click event on timer toggle\")\n        return\n    }\n\n    const { timerToggle } = elements\n    timerToggle.addEventListener(\"click\", () => toggleCountdown(), { signal: abort.signal })\n\n}\n\n", "import Countdown from \"./countdown\"\nimport { fetchElements } from \"./elements\"\nimport \"./events\"\n\ndeclare var htmx: any\n\nvar countdown: Countdown | null\n\n\nexport function initCountdown() {\n\n    console.debug(\"initCountdown :: start\")\n\n    // Fetch all the elements that we're going to be interacting with on the page\n    const elements = fetchElements()\n    if (!elements) return\n\n    const {\n        // Endpoint that HTMX will use to reach out and fetch the next level\n        nextLevelURI,\n        // A String representation of the number of seconds that the time needs to run for\n        durationSecStr,\n        // The HTMLElement representing the text of our timer\n        timer,\n    } = elements\n\n    // One scenario that can occur is when the timer is complete, meaning all levels have been run through,\n    // no seconds are returns. The attribute is not set on the element, so here we just make sure that we\n    // didn't receive an empty string\n    let parsedDuractionSec: number = 0\n    if (durationSecStr) {\n        parsedDuractionSec = parseInt(durationSecStr)\n    }\n\n    countdown = new Countdown({\n        initialValue: parsedDuractionSec,\n        showHour: parsedDuractionSec > 3600,\n        emitter: (text: string) => {\n            timer.innerHTML = text\n            console.debug(`received emitted value ${text}`)\n        },\n        onComplete: () => {\n\n            const nextLevelURIProceed = `${nextLevelURI}?proceed=true`\n\n            htmx.ajax(\n                'GET',\n                nextLevelURIProceed,\n                htmx.find('#timer-container')\n            )\n\n        }\n    })\n\n    console.debug(\"initCountdown :: complete\")\n\n}\n\nexport function toggleCountdown() {\n\n    console.debug(\"toggleCountdown :: start\")\n\n    if (!countdown) {\n        console.error(\"timerToggleEventClick :: countdown not set\")\n        return\n    }\n\n    const elements = fetchElements()\n    if (!elements) {\n        console.error(\"failed to fetch elements, unable to register click event on timer toggle\")\n        return\n    }\n\n    const { timerToggle } = elements\n\n    countdown.toggle()\n\n    if (!countdown.getIsRunning()) {\n        htmx.removeClass(timerToggle, \"fa-circle-stop\")\n        htmx.addClass(timerToggle, \"fa-circle-play\")\n    } else {\n        htmx.removeClass(timerToggle, \"fa-circle-play\")\n        htmx.addClass(timerToggle, \"fa-circle-stop\")\n    }\n\n    console.debug(\"toggleCountdown :: complete\")\n\n}\n\nexport function stopCountdown() {\n\n    console.debug(\"stopCountdown :: start\")\n\n\n    if (!countdown) {\n        console.error(\"failed to stop countdown, countdown is undefined\", countdown)\n        return\n    }\n\n    countdown.stop()\n\n    const elements = fetchElements()\n    if (!elements) {\n        console.error(\"failed to fetch elements, unable to register click event on timer toggle\")\n        return\n    }\n\n    const { timerToggle } = elements\n\n    htmx.removeClass(timerToggle, \"fa-circle-stop\")\n    htmx.addClass(timerToggle, \"fa-circle-play\")\n\n    console.debug(\"stopCountdown :: complete\")\n\n}\n\nexport function startCountdown() {\n\n    console.debug(\"startCountdown :: start\")\n\n    const elements = fetchElements()\n    if (!elements) {\n        console.error(\"failed to fetch elements, unable to register click event on timer toggle\")\n        return\n    }\n\n    const { timerToggle } = elements\n\n    htmx.removeClass(timerToggle, \"fa-circle-stop\")\n    htmx.addClass(timerToggle, \"fa-circle-play\")\n    countdown?.start()\n\n    console.debug(\"startCountdown :: complete\")\n\n}\n\n"],
  "mappings": "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",
  "names": ["Countdown", "initialValue", "showHour", "emitter", "onComplete", "duration", "parts", "bits", "bit", "countdown_default", "fetchElements", "timerContainer", "timer", "timerToggle", "nextTimerButton", "nextLevelURI", "durationSecStr", "abort", "initAbort", "initCountdown", "initTimerToggleEventClick", "resetCountdown", "startCountdown", "stopCountdown", "elements", "fetchElements", "timerToggle", "toggleCountdown", "countdown", "initCountdown", "elements", "fetchElements", "nextLevelURI", "durationSecStr", "timer", "parsedDuractionSec", "countdown_default", "text", "nextLevelURIProceed", "toggleCountdown", "timerToggle", "stopCountdown", "startCountdown"]
}
