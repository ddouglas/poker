{
  "version": 3,
  "sources": ["../../internal/javascript/src/countdown.ts", "../../internal/javascript/src/elements.ts", "../../internal/javascript/src/events.ts", "../../internal/javascript/src/main.ts"],
  "sourcesContent": ["interface CountdownOpts {\n    initialValue: number\n    showHour: boolean\n    emitter: (current: string) => void\n    onComplete: () => void\n}\n\nclass Countdown {\n    private initialValue: number\n    private showHour: boolean\n    private isRunning: boolean = false\n    private emitter: (current: string) => void\n    private onComplete: () => void\n    private countdownValue: number;\n    private interval: ReturnType<typeof setTimeout> | null;\n\n    constructor({ initialValue, showHour, emitter, onComplete }: CountdownOpts) {\n        this.initialValue = initialValue;\n        this.showHour = showHour;\n        this.emitter = emitter;\n        this.onComplete = onComplete;\n        this.countdownValue = initialValue;\n        this.interval = null;\n    }\n\n    private decrementCountdown() {\n        console.debug(\"Countdown.decrementCountdown() start\")\n        this.countdownValue--;\n\n        this.emitter(this.format(this.countdownValue))\n        if (this.countdownValue === 0) {\n            this.stop();\n            this.onComplete();\n        }\n        console.debug(\"Countdown.decrementCountdown() stop\")\n    }\n\n    private format(duration: number): string {\n        console.debug(\"Countdown.format() start\")\n        const parts = {\n            hours: Math.floor((duration / (60 * 60)) % 24),\n            minutes: Math.floor((duration / (60)) % 60),\n            seconds: Math.floor(duration % 60)\n        }\n\n        const bits: string[] = []\n        if (parts.hours > 0 && this.showHour) {\n            let bit: string = \"\"\n            if (parts.hours < 10) {\n                bit = `0`\n            }\n            bit = `${bit}${parts.hours}`\n        }\n\n        if (parts.minutes == 0) {\n            bits.push(`00`)\n        } else if (parts.minutes > 0) {\n            let bit: string = \"\"\n            if (parts.minutes < 10) {\n                bit = `0`\n            }\n            bit = `${bit}${parts.minutes}`\n            bits.push(bit)\n        }\n\n\n        if (parts.seconds == 0) {\n            bits.push(`00`)\n        } else if (parts.seconds > 0) {\n            let bit: string = \"\"\n            if (parts.seconds < 10) {\n                bit = `0`\n            }\n            bit = `${bit}${parts.seconds}`\n            bits.push(bit)\n        }\n\n        console.debug(\"Countdown.format() stop\")\n        return bits.join(':')\n\n    }\n\n    public start() {\n        console.debug(\"Countdown.start()\")\n        if (this.interval) {\n            console.debug(\"Countdown.start() if this.interval\")\n            this.reset()\n        }\n\n        if (this.countdownValue === 0) {\n            console.error(\"countdownValue is 0, shutdown down\")\n            this.stop()\n            return\n        }\n        console.debug(\"Countdown.start() this.interval\")\n        this.interval = setInterval(() => this.decrementCountdown(), 1000)\n        this.isRunning = true\n        console.debug(\"Countdown.start() done\")\n\n    }\n\n    public continue() {\n        this.stop()\n        this.start()\n    }\n\n    public stop() {\n        console.debug(\"Countdown.stop() start\")\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n\n        this.interval = null\n        this.isRunning = false\n        console.debug(\"Countdown.stop() stop\")\n    }\n\n    public toggle() {\n        console.debug(\"Countdown.toggle() start\")\n        this.isRunning ? this.stop() : this.start()\n        console.debug(\"Countdown.toggle() stop\")\n        return\n    }\n\n    public getIsRunning() {\n        return this.isRunning\n    }\n\n    public reset() {\n        console.debug(\"Countdown.reset() start\")\n        this.stop();\n        this.countdownValue = this.initialValue; // Reset the countdown value\n        console.log(\"reset :: \", this)\n        console.debug(\"Countdown.reset() stop\")\n    }\n}\n\nexport default Countdown", "\ninterface ElementsAndAttributes {\n    timerContainer: HTMLElement\n    timer: HTMLElement\n    timerToggle: HTMLElement\n    nextTimerButton: HTMLElement\n    nextLevelURI: string\n    durationSecStr: string\n}\n\nexport function fetchElements(): ElementsAndAttributes | null {\n    const timerContainer = document.getElementById('timer-container')\n    const timer = document.getElementById('timer')\n    const timerToggle = document.getElementById(\"toggle-timer-button\")\n    const nextTimerButton = document.getElementById(\"trigger-next-timer-level\")\n\n    if (!timerContainer) {\n        console.error(\"Failed to fetch timer-container by id\")\n        return null\n    }\n\n    if (!timer) {\n        console.error(\"failed to fetch timer element by id\")\n        return null\n    }\n\n    if (!timerToggle) {\n        console.error(\"failed to fetch toggle-timer-button element by id\")\n        return null\n    }\n    if (!nextTimerButton) {\n        console.error(\"failed to fetch trigger-next-timer-level element by id\")\n        return null\n    }\n\n    const nextLevelURI = `${nextTimerButton.getAttribute(\"hx-get\")}?continue=true`\n    if (!nextLevelURI) {\n        console.error(\"trigger-next-timer-level element is missing attribute hx-get\")\n        return null\n    }\n\n    let durationSecStr = timer.getAttribute(\"data-level-duration-sec\")\n    if (!durationSecStr) {\n        console.error(\"trigger-next-timer-level element is missing attribute data-level-duration-sec\")\n        durationSecStr = \"0\"\n        // return null\n    }\n\n    return { timer, timerContainer, timerToggle, nextTimerButton, nextLevelURI, durationSecStr }\n\n}", "import { fetchElements } from \"./elements\"\nimport { initCountdown, startCountdown, stopCountdown, toggleCountdown } from \"./main\"\n\nvar abort: AbortController\n\nfunction initAbort() {\n    abort = new AbortController()\n}\ninitAbort()\n\n\ndocument.body.addEventListener(\"htmx:load\", () => {\n    initCountdown()\n    initTimerToggleEventClick()\n})\n\ndocument.body.addEventListener(\"countdown::proceed\", () => {\n    console.debug(\"countdown::proceed :: start\")\n    resetCountdown()\n    startCountdown()\n    console.debug(\"countdown::proceed :: complete\")\n})\n\ndocument.body.addEventListener(\"countdown::reset\", () => {\n    console.debug(\"countdown::reset :: start\")\n    resetCountdown()\n    console.debug(\"countdown::reset :: complete\")\n})\n\nfunction resetCountdown() {\n    stopCountdown()\n    abort.abort()\n    initAbort()\n    initCountdown()\n    initTimerToggleEventClick()\n}\n\nfunction initTimerToggleEventClick() {\n\n    const elements = fetchElements()\n    if (!elements) {\n        console.error(\"failed to fetch elements, unable to register click event on timer toggle\")\n        return\n    }\n\n    const { timerToggle } = elements\n    timerToggle.addEventListener(\"click\", () => toggleCountdown(), { signal: abort.signal })\n\n}\n\n", "import Countdown from \"./countdown\"\nimport { fetchElements } from \"./elements\"\nimport \"./events\"\n\ndeclare var htmx: any\n\nvar countdown: Countdown | null\n\n\nexport function initCountdown() {\n\n    console.debug(\"initCountdown :: start\")\n\n    // Fetch all the elements that we're going to be interacting with on the page\n    const elements = fetchElements()\n    if (!elements) return\n\n    const {\n        // Endpoint that HTMX will use to reach out and fetch the next level\n        nextLevelURI,\n        // A String representation of the number of seconds that the time needs to run for\n        durationSecStr,\n        // The HTMLElement representing the text of our timer\n        timer,\n        // // The HTMLElement representing the button that is used to start and stop the timer\n        // timerToggle\n    } = elements\n\n    // One scenario that can occur is when the timer is complete, meaning all levels have been run through,\n    // no seconds are returns. The attribute is not set on the element, so here we just make sure that we\n    // didn't receive an empty string\n    let parsedDuractionSec: number = 0\n    if (durationSecStr) {\n        parsedDuractionSec = parseInt(durationSecStr)\n    }\n\n    countdown = new Countdown({\n        initialValue: parsedDuractionSec,\n        showHour: parsedDuractionSec > 3600,\n        emitter: (text: string) => {\n            timer.innerHTML = text\n            console.debug(`received emitted value ${text}`)\n        },\n        onComplete: () => {\n\n            const nextLevelURIContinue = `${nextLevelURI}?continue=true`\n\n            htmx.ajax(\n                'GET',\n                nextLevelURIContinue,\n                htmx.find('#timer-container')\n            )\n        }\n    })\n\n\n    console.debug(\"initCountdown :: complete\")\n}\n\nexport function toggleCountdown() {\n\n    console.debug(\"toggleCountdown :: start\")\n\n    if (!countdown) {\n        console.error(\"timerToggleEventClick :: countdown not set\")\n        return\n    }\n\n    const elements = fetchElements()\n    if (!elements) {\n        console.error(\"failed to fetch elements, unable to register click event on timer toggle\")\n        return\n    }\n\n    const { timerToggle } = elements\n\n\n    countdown.toggle()\n\n    if (!countdown.getIsRunning()) {\n        htmx.removeClass(timerToggle, \"fa-circle-stop\")\n        htmx.addClass(timerToggle, \"fa-circle-play\")\n    } else {\n        htmx.removeClass(timerToggle, \"fa-circle-play\")\n        htmx.addClass(timerToggle, \"fa-circle-stop\")\n    }\n\n    console.debug(\"toggleCountdown :: complete\")\n\n}\n\nexport function stopCountdown() {\n    countdown?.stop()\n    const elements = fetchElements()\n    if (!elements) {\n        console.error(\"failed to fetch elements, unable to register click event on timer toggle\")\n        return\n    }\n\n    const { timerToggle } = elements\n\n    htmx.removeClass(timerToggle, \"fa-circle-stop\")\n    htmx.addClass(timerToggle, \"fa-circle-play\")\n\n}\n\nexport function startCountdown() {\n    const elements = fetchElements()\n    if (!elements) {\n        console.error(\"failed to fetch elements, unable to register click event on timer toggle\")\n        return\n    }\n\n    const { timerToggle } = elements\n\n    htmx.removeClass(timerToggle, \"fa-circle-stop\")\n    htmx.addClass(timerToggle, \"fa-circle-play\")\n    countdown?.start()\n}\n\n"],
  "mappings": "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",
  "names": []
}
